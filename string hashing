#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define vl vector<long long>
#define vvl vector<vector<long long>>
#define vs vector<string>
#define vb vector<bool>
#define vp vector<pair<ll, ll>>
#define vc vector<char>
#define mll map<long long, long long>
#define pb push_back
#define fs(i, a, b) for (ll i = a; i < b; i++)
#define print(v) for (auto x : v) cout << x << " "
#define printt(v) for (auto [x,y] : v) cout << x << " "<<y<<endl
#define endl '\n'
#define len(v) (ll)v.size()
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(),v.rend()
const ll mod = 1e9+7;
const ll inf=1e18;
#define X first
#define Y second
using ii = pair<ll,ll>;

const int MOD =  (1ULL << 31) - 1;
const ii BASE = {1e9 + 7, 1e9 + 9};
 
ii operator+(const ii &a, const ii &b)
{
    return {(a.first + b.first) % MOD, (a.second + b.second) % MOD};
}
 
ii operator+(const ii &a, const ll &b)
{
    return {(a.first + b) % MOD, (a.second + b) % MOD};
}
 
ii operator-(const ii &a, const ii &b)
{
    return {(MOD + a.first - b.first) % MOD, (MOD + a.second - b.second) % MOD};
}
 
ii operator*(const ii &a, const ii &b)
{
    return {(a.first * b.first) % MOD, (a.second * b.second) % MOD};
}
 
ii operator*(const ii &a, const ll &b)
{
    return {(a.first * b) % MOD, (a.second * b) % MOD};
}
 
inline ll modpow(ll x, int p)
{
    if (!p)
        return 1;
    return (modpow(x * x % MOD, p >> 1) * (p % 2 ? x : 1)) % MOD;
}
 
inline ll modinv(ll x)
{
    return modpow(x, MOD - 2);
}
 
struct hsh_bit
{
    int N;
    string S;
    vector<ii> fen, pp, ipp;
 
    hsh_bit(string S_)
    {
        S = S_;
        N = S.size();
        fen.resize(N + 1);
        pp.resize(N);
        ipp.resize(N);
        pp[0] = ipp[0] = {1, 1};
        const ii ibase = {modinv(BASE.first), modinv(BASE.second)};
        for (int i = 1; i < N; i++)
        {
            pp[i] = pp[i - 1] * BASE;
            ipp[i] = ipp[i - 1] * ibase;
        }
        for (int i = 0; i < N; i++)
        {
            upd(i, S[i]);
        }
    }
 
    void upd(int i, int x)
    {
        ii p = pp[i] * x;
        for (++i; i <= N; i += i & -i)
        {
            fen[i] = fen[i] + p;
        }
    }
 
    ii qry(int i)
    {
        ii ret = {0, 0};
        for (; i; i -= i & -i)
        {
            ret = ret + fen[i];
        }
        return ret;
    }
 
    void set(int i, char c)
    {
        int d = (MOD + c - S[i]) % MOD;
        S[i] = c;
        upd(i, d);
    }
 
    ii get(int s, int e)
    {
        return (qry(e) - qry(s)) * ipp[s];
    }
};

void solve() {
  ll n,q;cin>>n>>q;
  string s;cin>>s;
  hsh_bit left(s);
  reverse(all(s));
  hsh_bit right(s);
  while(q--){
    ll l,r;cin>>l>>r;
    vl check(4,0);
    ll m=(r-l+1);
    //cout<<s.substr(l-1,r-l+1)<<endl;
    fs(i,0,4){
      if(l+i>r) break;
      bool check1=left.get(l-1+i,r-1)==right.get((n-1)-(r-1),(n-1)-(l-1+i));
      bool check2=left.get(l-1,r-1-i)==right.get((n-1)-(r-1-i),(n-1)-(l-1));
      if(check2&&check1) check[i]=1;
    }
    ll fin=m*(m+1)/2-1;
    if(check[0]) fin-=m;
    if(check[0]&&check[1]) fin=0;
    else if(check[0]&&check[2]) fin=(m/2)*(m/2+1);
    else if(check[1]&&check[3]) fin=(m/2)*(m/2+1);
    cout<<fin<<endl;
  }
}


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    ll T=1;
    cin>>T;
    fs(i,0,T) solve();
}











