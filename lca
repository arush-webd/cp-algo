#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define vl vector<long long>
#define vvl vector<vector<long long>>
#define vs vector<string>
#define vb vector<bool>
#define vp vector<pair<ll, ll>>
#define vc vector<char>
#define mll map<long long, long long>
#define pb push_back
#define fs(i, a, b) for (ll i = a; i < b; i++)
#define print(v) for (auto x : v) cout << x << " "
#define printt(v) for (auto [x,y] : v) cout << x << " "<<y<<endl
#define endl '\n'
#define len(v) (ll)v.size()
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(),v.rend()
const ll mod = 1e9+7;
const ll inf=1e18;
#define X first
#define Y second
using ii = pair<ll,ll>;
 
const ll N=2e5+10;
ll jump[20][N];
vl adj[N];
ll lev[N];
ll pref[N];
 
void dfs(ll u,ll p,ll l){
  lev[u]=l;
  jump[0][u]=p;
  for(auto &v:adj[u]){
    if(v==p) continue;
    dfs(v,u,l+1);
  }
}
 
void preProcess(){
  fs(i,1,20){
    fs(j,1,N+1){
      jump[i][j]=jump[i-1][jump[i-1][j]];
    }
  }
}
 
ll lca(ll p,ll q){
  if(lev[q]<lev[p]) swap(p,q);
  ll diff=lev[q]-lev[p];
  for(ll i=19;i>=0;i--){
    if((1ll<<i)&diff){
      q=jump[i][q];
    }
  }
  if(p==q) return q;
  for(ll i=19;i>=0;i--){
    if(jump[i][q]!=jump[i][p]){
      p=jump[i][p];
      q=jump[i][q];
    }
  }
  return jump[0][q];
}
 
void dfs2(ll u,ll p){
  for(auto &v:adj[u]){
    if(v==p) continue;
    dfs2(v,u);
    pref[u]+=pref[v];
  }
}
 
void solve() {
  ll n,q;cin>>n>>q;
  fs(i,2,n+1){
    ll u,v;cin>>u>>v;
    adj[u].pb(v);
    adj[v].pb(u);
  }
  dfs(1,0,1);
  preProcess();
  while(q--){
    ll u,v;cin>>u>>v;
    pref[u]++;pref[v]++;
    ll l=lca(u,v);
    pref[l]--;
    pref[jump[0][l]]--;
  }
  dfs2(1,0);
  fs(i,1,n+1) cout<<pref[i]<<" ";
  cout<<endl;
}
 
 
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    ll T=1;
    //cin>>T;
    fs(i,0,T) solve();
}
 
 
 
 
 
 
